---
# Install k8s components on all nodes
- hosts: all
  become: true
  vars_files:
    - variables.yaml
  tasks:
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg2
    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
    - name: Add apt repository for stable version
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian stretch stable"
        state: present
    - name: Install docker and its dependecies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
    - name: Add demouser user to docker group
      user:
        name: wachayathorn.singsena
        group: docker
    - name: Set up the Docker daemon
      shell:
        cmd: |-
          cat > /etc/docker/daemon.json <<EOF
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
          EOF
          mkdir -p /etc/systemd/system/docker.service.d
    - name: Restart Docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none
    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0
    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl
    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted
# Initialize k8s cluster on master node
- hosts: master
  become: true
  vars_files:
    - variables.yaml
  tasks:
    - name: Initialize Kubernetes
      shell:
        cmd: |-
          kubeadm --apiserver-advertise-address="{{ master.internal_ip }}" --apiserver-cert-extra-sans="{{ master.external_ip }}" --pod-network-cidr=10.244.0.0/16 init
    - name: Setup kubeconfig for demouser
      command: "{{ item }}"
      with_items:
        - mkdir -p /home/wachayathorn.singsena/.kube
        - cp -i /etc/kubernetes/admin.conf /home/wachayathorn.singsena/.kube/config
        - sudo chown wachayathorn.singsena:wachayathorn.singsena /home/wachayathorn.singsena/.kube/config
    - name: Install calico pod network
      become: false
      command: kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml
    - name: Generate join command
      become: false
      command: kubeadm token create --print-join-command
      register: join_command
    - name: Copy join_command to local file
      become: false
      copy:
        content: "{{ join_command.stdout }}"
        dest: "./join-command"
      delegate_to: localhost
    - name: Fetch k8s config file
      fetch:
        src: /home/wachayathorn.singsena/.kube/config
        dest: config
        flat: yes

# Have the worker nodes joined cluster
- hosts: worker
  become: true
  tasks:
    - name: Copy the join command to server location
      # copy: src=join-command dest=/tmp/join-command.sh mode=0777
      copy:
        src: "join-command"
        dest: "/tmp/join-command.sh"
    - name: Join the node to cluster
      command: sh /tmp/join-command.sh
